

[{
    "post_id":"keepalive",
    "title": "keepalive",
    "date": "March 14th, 2023",
    "img":{
        "path": "https://www.freecodecamp.org/news/content/images/2021/10/golang.png",
        "attr":""
    },
    "content":"Well, long time without an update and a full website redesign later and - here we are.\nIt's been a great two and a half years since I've last written a blog post, and I think it's about time to write a new one. And maybe update this a bit more regularly.\nFirst for the personal updates - I've begun a new role as a Software Engineer at Canon USA. Well, I've been in that role for over half a year now, and I'm very happy with the opportunities challenges it provides me. Truthfully, I also genuinely enjoyed my previous job over at Endeavor, but I wanted to pivot from QA/SDET over to Software Engineering. And that has been an absolute pleasure - from building an interesting product to joining a very skilled and welcoming team - I couldn't be happier.\nNow onto plans moving forward - I very much plan on getting back into more personal projects. I suppose this redesign (which is itself still a work in progress) counts as one, but I want to take a deeper dive into harder projects. Specifically,I wanted to take a look at languages and frameworks I'm not the most familiar with. I've worked on many smaller scale projects in my spare time, and I want to revisit some of the lower level languages and the challenges that come with them. Node is great for creating a project nice and quick, but, the amount of abstraction it gives you can ultimately limit you and how much you learn. Additionally, the lack of multithreading does lead to an inherent problem with concurrency - namely, how does one actually do it? There's the obvious solution of using a Process Manager, which I've actually worked with before. There's another soluion of simply scaling horizontally. But realistically, I'd prefer to keep any infrastructure costs to a minimum, if not within free tier entirely for personal projects. So for my next project, I'd like to use a lower level language with better tools for concurrency, some obvious frameworks that support your basic necessities (ie creating REST APIs). And ideally, it's a language I've not yet worked with. Quite the list of requirements. I wonder which one I will Go with.\nIn any case, I'll be posting updates on any personal projects here more regularly. "
},
{
    "post_id":"baseball_decision_tree",
    "title": "How to Know What Pitch is Coming",
    "date": "August 8th, 2020",
    "img":{
        "path": "https://mlb.nbcsports.com/wp-content/uploads/sites/7/2019/06/gettyimages-85899790-e1559750899725.jpg",
        "attr":"Getty Images"
    },
    "content":"Baseball is back - for now at least. Coronavirus cases are surging, so I'm not sure how long this will last. Until then, I'll enjoy watching while I can. Wait, why are the Astros getting thrown at? Why did a reliever get suspended for over 13% of the season? The answer is a rather complicated one.\n In short, the Astros cheated their way to a world series. And, they kinda got away with it. I mean, they got caught. But ultimately, no players got punished. Upper management was impacted, as many of the coaches were fired and/or suspended. But how exactly did they cheat? Well, they stole the signs. Basically, they decrypted the signs relayed from catchers to pitchers on what pitch to throw. This alone is not illegal in baseball. And it's not exactly a SHA-512 Hash. There are only a handful of pitches in a pitcher's arsenal, so there aren't that many signs to decrypt. It is very possible for a human being to do so without any technology. The technology part - that's where it's illegal. Using technology in game to aid is forbidden. Admittedly, technology is a bit of a vague term. Players are allowed to take notes and refer to them in games, so we'll just use the word technology to mean any device requiring some type of energy to function - battery, electricity, solar power, etc. \n The Astros ultimately used a camera with an absurd zoom to see the signs, then relayed the signs (allegedly) using bluetooth mics/headphones. This is a very clear cut violation of the rules. And they did this in 2017 and onwards, ultimately cheating teams they faced out of the opportunity to compete for a championship, and in the case of the Dodgers, a championship. So how could this be done legally? \n Very easily, thanks to Statcast & SciKit Learn. What is Statcast? In short, it's MLB's free public data source. It provides clean, neatly organized CSVs on every pitch thrown in the season by a given pitcher. You can find out the batter they're against, the handedness, score, inning, etc. SciKit Learn is the most simple to use Machine Learning library out there, and one that is very well tested. The Decision Tree Model is of particular interest. A decision tree model just bases decisions on past data, and predicts future outcomes accordingly. So hypothetically, if one wanted to predict if a fast pitch or a slow pitch were coming, one could do so. And, one could also write down the results on paper to use in game. No use of technology in the game, no rules broken. And, one might even have a resource that already does that online ;) In any case, hopefully we can get through this baseball season with the players staying safe, and without any more cheating. "
}]